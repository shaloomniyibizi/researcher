generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  pedding
  accepted
  rejected
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}

enum VoteType {
  UP
  DOWN
}

enum UserSystem {
  assistant
  user
  system
  function
  tool
}

// schema.prisma
model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  emailVerified         DateTime?
  password              String
  role                  Role                   @default(STUDENT)
  image                 String?
  phoneNumber           String?
  onboarded             Boolean                @default(false)
  bio                   String?
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  student               Student?
  faculty               Faculty?
  Account               Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  comment               Comment[]
  votes                 Vote[]
  commentVote           CommentVote[]
  Chats                 Chats[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        String?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id         String    @id @default(cuid())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  department String
  year       String
  projects   Project[]
}

model Faculty {
  id                 String    @id @default(cuid())
  userId             String    @unique
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  department         String
  supervisedProjects Project[]
}

model Project {
  id           String        @id @default(cuid())
  title        String
  description  String
  challenges   String
  codeLink     String?
  methodology  String?
  objective    String?
  pdf          String?
  results      String
  technologies String
  image        String?
  status       ProjectStatus @default(pedding)
  studentId    String
  student      Student       @relation(fields: [studentId], references: [id])
  facultyId    String?
  faculty      Faculty?      @relation(fields: [facultyId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  comments     Comment[]
  votes        Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  type      VoteType

  @@id([userId, projectId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

model Chats {
  id         String     @id @default(cuid())
  pdfName    String
  pdfUrl     String
  pdfContent String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  fileKey    String
  Messages   Messages[]
  user       User       @relation(fields: [userId], references: [id])
  userId     String
}

model Messages {
  id        String     @id @default(cuid())
  chatId    String
  content   String
  createdAt DateTime   @default(now())
  role      UserSystem
  chat      Chats      @relation(fields: [chatId], references: [id])
}

model UserSubscriptions {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
}
